<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <!--  User options button icon  -->
    <Style x:Key="IconButtonIcon" TargetType="iconPacks:PackIconMaterial">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </Style>

    <!--  Form Header Icon  -->
    <Style x:Key="FormButtonIcon"
           BasedOn="{StaticResource IconButtonIcon}"
           TargetType="iconPacks:PackIconMaterial">
        <Setter Property="Padding" Value="3,5,0,0" />
    </Style>

    <!--  RoundedIntegerUpDownStyle  -->
    <Style x:Key="RoundedIntegerUpDownStyle" TargetType="{x:Type xctk:IntegerUpDown}">
        <!--  This style overrides the existing ControlTemplate  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:IntegerUpDown}">
                    <!--  The Border is where the CornerRadius is applied  -->
                    <Border x:Name="BorderElement"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10">
                        <!--  Adjust the value here  -->

                        <!--  A Grid (or other layout panels) holds the input field and spinner buttons  -->
                        <Grid>
                            <!--  Template parts such as TextBox and buttons go here  -->
                            <!--  This is a simplified placeholder for the actual content  -->
                            <TextBox HorizontalContentAlignment="Center"
                                     VerticalContentAlignment="Center"
                                     Text="{TemplateBinding Value}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  NumericUpDownButtonStyle  -->
    <Style x:Key="NumericUpDownButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="LightGreen" />
    </Style>

    <!--  Custom IntegerUpDown Style  -->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Style x:Key="IntegerBoxStyle" TargetType="{x:Type xctk:IntegerUpDown}">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="80" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:IntegerUpDown}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBox x:Name="PART_TextBox"
                                     HorizontalContentAlignment="Left"
                                     VerticalContentAlignment="Center"
                                     BorderThickness="0"
                                     Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
                            <StackPanel Grid.Column="1" Orientation="Vertical">
                                <RepeatButton x:Name="PART_IncreaseButton"
                                              Content="▲"
                                              Style="{StaticResource NumericUpDownButtonStyle}" />
                                <RepeatButton x:Name="PART_DecreaseButton"
                                              Content="▼"
                                              Style="{StaticResource NumericUpDownButtonStyle}" />
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Custom TextBox Style with Tooltip on Hover for Validation Errors  -->
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource PrimaryTextBoxBackgroundColor}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryTextBoxGrayColor}" />
        <Setter Property="Padding" Value="5.2,2.7" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="FontFamily" Value="Californian FB" />
        <Setter Property="FontWeight" Value="Heavy" />
        <Setter Property="Width" Value="300" />
        <Setter Property="MaxWidth" Value="300" />
        <Setter Property="Height" Value="auto" />
        <Setter Property="MaxHeight" Value="40" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <!--  Root Grid to contain all elements  -->
                    <Grid>
                        <!--  Border provides background, border, and padding  -->
                        <Border x:Name="Border"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5"
                                SnapsToDevicePixels="True">
                            <!--  Essential part for text rendering and scrolling  -->
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Hidden"
                                          IsDeferredScrollingEnabled="False"
                                          VerticalScrollBarVisibility="Hidden" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  ControlTemplate triggers  -->
        <Style.Triggers>
            <!--  Focused State Trigger  -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <!--  Change border color when the TextBox has focus  -->
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
            <!--  MouseOver State Trigger  -->
            <Trigger Property="IsMouseOver" Value="True">
                <!--  Change border color when the mouse is over the TextBox  -->
                <Setter Property="BorderBrush" Value="#FF7EB4EA" />
            </Trigger>
            <!--  Disabled State Trigger  -->
            <Trigger Property="IsEnabled" Value="False">
                <!--  Adjust appearance when TextBox is disabled  -->
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>

    </Style>


    <!--#endregion-->

    <!--  Success Button  -->
    <Style x:Key="SuccessButton" TargetType="Button">
        <Setter Property="Background" Value="#4880ff" />
        <Setter Property="Foreground" Value="#ffffff" />
        <Setter Property="Width" Value="180" />
        <Setter Property="Height" Value="40" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="7">
                        <ContentPresenter Margin="0,0,0,1"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#3b6bd9" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#3b6bd9" />
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Delete Button  -->
    <Style x:Key="DeleteButton"
           BasedOn="{StaticResource SuccessButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#f44336" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#region SecondaryButton-->

    <Style x:Key="CancelButton"
           BasedOn="{StaticResource SuccessButton}"
           TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#979797" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="#b9b9b9"
                            BorderThickness="0.8"
                            CornerRadius="7">
                        <ContentPresenter Margin="0,0,0,1"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#868686" />
                <Setter Property="Foreground" Value="#ffffff" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--  Style for the IntegerUpDown  -->
    <Style x:Key="IntegerUpDownTextBoxStyle" TargetType="{x:Type xctk:IntegerUpDown}">
        <Setter Property="Width" Value="300" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="5,3" />
    </Style>

    <!--  Style for the DoubleUpDown  -->
    <Style x:Key="DoubleUpDownTextBoxStyle" TargetType="{x:Type xctk:DoubleUpDown}">
        <Setter Property="Width" Value="300" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="5,3" />
    </Style>

</ResourceDictionary>